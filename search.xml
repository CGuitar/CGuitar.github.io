<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用BERT文本情感分析实现酒店评分有效性调整-自然语言处理期末作业</title>
      <link href="/2024/12/28/SentimentAnalysis-HotelRatingValidity/"/>
      <url>/2024/12/28/SentimentAnalysis-HotelRatingValidity/</url>
      
        <content type="html"><![CDATA[<h1 id="原题背景与要求"><a href="#原题背景与要求" class="headerlink" title="原题背景与要求"></a>原题背景与要求</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于评论文本自身存在差异，可能会出现<strong>内容不相关</strong>、<strong>简单复制修改</strong>和<strong>无有效内容</strong>等现象，这会妨碍游客从网络评价中获得有价值的信息，也为各网络平台的运营工作带来了挑战。探其根本，自动地评价文本有效性，有助于提升景区和酒店的服务质量，将游客的需求落到实处，同时有利于旅游平台的在线运营。因此，本文融合五项指标，从<strong>相关性</strong>、<strong>完整性</strong>、<strong>可解释性</strong>、<strong>情感性</strong>、<strong>时效性</strong>等角度，自动地评价文本的有效性，并创新性地进行了高效评论排序。</p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>对于评论中的文本有效性进行分析，主要是从三方面进行分析。<strong>第一点，有的评论可能是由其他评论简单复制修改后的垃圾评论</strong>；<strong>第二点，有的评论的内容可能与店家无关，是打广告之类的无关内容</strong>；<strong>第三点，有的评论虽然主题与店家相关，但是店家的介绍之类的，没有对店家进行评价</strong>。我们建立的模型主要从这三方面对于评论进行筛选。</p><hr><h1 id="新的观点与实现大纲"><a href="#新的观点与实现大纲" class="headerlink" title="新的观点与实现大纲"></a>新的观点与实现大纲</h1><ul><li>在原题要求中的第二点中，因为用户的评论数据来自于各大旅游平台，而多数平台会自动删除过滤掉一些无效信息以及广告，因此对无关内容的筛选，实际意义并不高。</li><li>在对大量旅游评论的观察统计后，发现在评论区中，许多用户评论很好，但打分很低；或者评论很差，打分很高。也有不少复制粘贴的评论以及无意义的评论。</li></ul><p><strong>综上所述，我重新调整了需求，以符合现实意义。以下是项目的实现大纲：</strong></p><ol><li>爬取携程网上日本东京的8家平价酒店各200条评论，下面是字段名<ul><li>酒店名称</li><li>酒店总体评分</li><li>入住时间</li><li>客户评分</li><li>评价内容</li></ul></li><li>爬取后的Excel转csv文件</li><li>删除2年前的评论</li><li>删除字数小于5的评论（不包括标点符号）</li><li>使用余弦相似度，用TF-IDF 将评论转换为向量，删除重复度高的评论</li><li><em>对所有评论使用pypinyin+Pinyin2Hanzi实现“中文加密”破解</em></li><li>使用BERT模型，实现文本情感分析</li><li>通过情感分析微调客户评分</li><li>重新计算各酒店总体评分</li></ol><h1 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ./bert</span><br><span class="line">│   ├── ./bert/checkpoints</span><br><span class="line">│   ├── ./bert/data</span><br><span class="line">│   │   ├── ./bert/data/test.txt</span><br><span class="line">│   │   ├── ./data/data/train.txt</span><br><span class="line">│   ├── ./bert/config.py</span><br><span class="line">│   ├── ./bert/exc2csv.py</span><br><span class="line">│   ├── ./bert/postData.py</span><br><span class="line">│   ├── ./bert/preData.py</span><br><span class="line">│   ├── ./bert/process.py</span><br><span class="line">│   ├── ./bert/test.py</span><br><span class="line">│   ├── ./bert/train.py</span><br><span class="line">│   ├── ./bert/TF-IDF.py</span><br><span class="line">│   ├── ./bert/requirements.txt</span><br><span class="line">│   └── ./bert/decrypt.py</span><br><span class="line">————————————————</span><br></pre></td></tr></table></figure><h2 id="文件解释："><a href="#文件解释：" class="headerlink" title="文件解释："></a>文件解释：</h2><p>exc2csv.py，preData.py，TF-IDF.py，decrypt.py用于数据预处理<br>train.py，test.py，process.py，config.py，data，checkpoints用于BERT文本情感分析<br>postData.py实现最终数据处理</p><hr><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="一、酒店网评爬取"><a href="#一、酒店网评爬取" class="headerlink" title="一、酒店网评爬取"></a>一、酒店网评爬取</h2><p>具体过程略，这里我选择了携程上日本东京300-500的平价酒店，<br>爬取了{酒店名称，酒店总体评分，入住时间，客户评分，评价内容}五个部分</p><h2 id="二、Excel转csv"><a href="#二、Excel转csv" class="headerlink" title="二、Excel转csv"></a>二、Excel转csv</h2><p>方便后续处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line">python exc2csv.py</span><br></pre></td></tr></table></figure><h2 id="三、删除2年前的评论以及字数小于5的评论（不包括标点符号）"><a href="#三、删除2年前的评论以及字数小于5的评论（不包括标点符号）" class="headerlink" title="三、删除2年前的评论以及字数小于5的评论（不包括标点符号）"></a>三、删除2年前的评论以及字数小于5的评论（不包括标点符号）</h2><p>2年前的评论参考价值较低，字数小于5的评论多数为随意评论</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python preData.py</span><br></pre></td></tr></table></figure><h2 id="四、使用余弦相似度，用TF-IDF-将评论转换为向量，删除重复度高的评论"><a href="#四、使用余弦相似度，用TF-IDF-将评论转换为向量，删除重复度高的评论" class="headerlink" title="四、使用余弦相似度，用TF-IDF 将评论转换为向量，删除重复度高的评论"></a>四、使用余弦相似度，用TF-IDF 将评论转换为向量，删除重复度高的评论</h2><p>重复度高的评论多数为复制粘贴，或者套用模板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python TF-IDF.py</span><br></pre></td></tr></table></figure><h2 id="五、对所有评论使用pypinyin-Pinyin2Hanzi实现“中文加密”破解"><a href="#五、对所有评论使用pypinyin-Pinyin2Hanzi实现“中文加密”破解" class="headerlink" title="* 五、对所有评论使用pypinyin+Pinyin2Hanzi实现“中文加密”破解"></a>* 五、对所有评论使用pypinyin+Pinyin2Hanzi实现“中文加密”破解</h2><p>什么是“中文加密”: <a href="https://www.bilibili.com/video/BV1MjsLeyEBD?vd_source=56fa190c2c2f18f1c5a6a89188ec1dc1">bilibili-中文加密评论：西班牙餐厅避雷指南！</a><br>因为中文加密多数为容易让外国人以及AI曲解的谐音字。因此想到可以试着重构一下，让汉字变回拼音再变回汉字。</p><blockquote><p>例如：<br>喃吃的饭，服务是完全美诱的，千万补药来！ –&gt;<br>nan chi de fan, fu wu shi wan quan mei you de, qian wan bu yao lai！ –&gt;<br>难吃的饭，服务是完全没有的，千万不要来！</p></blockquote><p>但因为Pinyin2Hanzi性能较差，没有找到其他合适的拼音转汉字方法，因此实际效果并不理想</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python decrypt.py</span><br></pre></td></tr></table></figure><h2 id="六、通过BERT文本情感分析微调客户评分"><a href="#六、通过BERT文本情感分析微调客户评分" class="headerlink" title="六、通过BERT文本情感分析微调客户评分"></a>六、通过BERT文本情感分析微调客户评分</h2><p>2年前的评论参考价值较低，字数小于5的评论多数为随意评论</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用config.py中的参数开始训练data中内容，在checkpoints文件夹中生成模型文件</span></span><br><span class="line">python train.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读取预处理后的csv文件，实现文本情感的三分类</span></span><br><span class="line">python test.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过BERT模型得出的文本情感，对客户评分字段进行微调，并更新酒店总体评分</span></span><br><span class="line">python postData.py</span><br></pre></td></tr></table></figure><h2 id="七、部分工作过程"><a href="#七、部分工作过程" class="headerlink" title="七、部分工作过程"></a>七、部分工作过程</h2><ul><li>预处理、后处理、BERT的test在本机上实现，模型训练在云服务器上进行</li></ul><p><img src="https://github.com/user-attachments/assets/acccfd31-4357-491b-89a0-331ce7b9733d" alt="BERT在AutoDL上的训练"><br><img src="https://github.com/user-attachments/assets/333ef670-1b3b-4f25-b319-cfcd5915b4c6" alt="BERT情感分析测试"><br><img src="https://github.com/user-attachments/assets/26f029e4-b071-4269-b519-fd6745ec8d0e" alt="重复度高的评论的查找与删除"><br><img src="https://github.com/user-attachments/assets/af56e927-501b-4f4e-886b-5b1d83f3726e" alt="loss曲线"><br><img src="https://github.com/user-attachments/assets/7e59bcde-7f38-4eb2-a92d-c1bccfa68113" alt="F1曲线"><br><img src="https://github.com/user-attachments/assets/3d4c78de-4024-47d8-b1e6-a1e63b334ba0" alt="最终结果"></p><h2 id="八、参考代码"><a href="#八、参考代码" class="headerlink" title="八、参考代码"></a>八、参考代码</h2><p>GitHub：<a href="https://github.com/yaokui2018/SentimentAnalysis?tab=readme-ov-file">中文情感分类 | 基于三分类的文本情感分析</a></p><ul><li>参考了他使用BERT文本情感分析的训练方法</li></ul><hr><p>本项目的CSDN：<a href="https://blog.csdn.net/PJ212/article/details/144570396?spm=1001.2014.3001.5502">用BERT文本情感分析实现酒店评分有效性调整——自然语言处理期末大作业</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SeaDronesSee数据集在YOLOV8上的部署</title>
      <link href="/2024/12/28/SeaDronesSee/"/>
      <url>/2024/12/28/SeaDronesSee/</url>
      
        <content type="html"><![CDATA[<h1 id="SeaDronesSee数据集在YOLOV8上的部署"><a href="#SeaDronesSee数据集在YOLOV8上的部署" class="headerlink" title="SeaDronesSee数据集在YOLOV8上的部署"></a>SeaDronesSee数据集在YOLOV8上的部署</h1><p>SeaDronesSee数据集为无人机拍摄的海洋救援相关的数据集。目标框有’ignored’, ‘swimmer’, ‘boat’, ‘jetski’, ‘life_saving_appliances’, ‘buoy’六个类别。以下内容为为实现该数据集在yoloV8上的部署，进行的预处理与运行测试。</p><ul><li>数据来源：<a href="https://github.com/Ben93kie/SeaDronesSee/tree/main">SeaDronesSee</a></li><li>CSDN上的文章：<a href="https://blog.csdn.net/PJ212/article/details/135344900">SeaDronesSee数据集在YOLOV8上的部署</a></li></ul><h2 id="一、数据预处理"><a href="#一、数据预处理" class="headerlink" title="一、数据预处理"></a>一、数据预处理</h2><ol><li>将解压后的Compressed Version中的images和annotations粘贴到data中</li><li>运行data_process.py。将会生成三个txt文件和一个labels文件夹</li><li>把images&#x2F;test、train、val中的所有图片移动到images下</li></ol><ul><li><p>注意！   在autodl上，SeaDronesSee.yaml中的txt路径要这样写才能找到，如果不行的话需要再调试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train: ../../data/train.txt</span><br><span class="line">val: ../../data/val.txt</span><br><span class="line">test: ../../data/test.txt</span><br></pre></td></tr></table></figure></li><li><p>yolov8最终会读取的东西：images下的所有jpg、labels下的所有txt、SeaDronesSee.yaml、train.txt、val.txt、test.txt</p><blockquote><p>训练开始前所必须的目录结构（能多不能少）：</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ./data</span><br><span class="line">│   ├── ./data/images</span><br><span class="line">│   │   ├── ./data/images/1.jpg</span><br><span class="line">│   │   ├── ./data/images/2.jpg</span><br><span class="line">│   │   ├── ./data/images/3.jpg</span><br><span class="line">│   │   ├── ...</span><br><span class="line">│   ├── ./data/labels</span><br><span class="line">│   │   ├── ./data/labels/1.txt</span><br><span class="line">│   │   ├── ./data/labels/2.txt</span><br><span class="line">│   │   ├── ./data/labels/3.txt</span><br><span class="line">│   │   ├── ...</span><br><span class="line">│   ├── ./data/SeaDronesSee.yaml</span><br><span class="line">│   ├── ./data/train.txt</span><br><span class="line">│   ├── ./data/val.txt</span><br><span class="line">│   └── ./data/test.txt</span><br><span class="line">————————————————</span><br></pre></td></tr></table></figure><h2 id="二、快速开始"><a href="#二、快速开始" class="headerlink" title="二、快速开始"></a>二、快速开始</h2><ol><li>模型训练（只进行了快速试验，若换成yolov8s.pt   epochs&#x3D;100，效果会更好些）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yolo task=detect mode=train model=yolov8n.pt data=data/SeaDronesSee.yaml batch=32 epochs=20 imgsz=640 workers=16 device=0</span><br></pre></td></tr></table></figure><ol start="2"><li>模型验证（注意！运行前请查看并替换上面train生成的文件夹名称‘runs&#x2F;detect&#x2F;train1’）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yolo task=detect mode=val model=runs/detect/train1/weights/best.pt data=data/SeaDronesSee.yaml device=0</span><br></pre></td></tr></table></figure><ol start="8"><li>模型预测（source换为需要预测的文件目录）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yolo task=detect mode=predict model=runs/detect/train1/weights/best.pt source=data/images device=0</span><br></pre></td></tr></table></figure><ul><li>所有的运行结果会保存在&#x2F;runs&#x2F;detect&#x2F;目录下</li></ul><h2 id="二、文件解释"><a href="#二、文件解释" class="headerlink" title="二、文件解释"></a>二、文件解释</h2><p>最终目标：实现yaml对三个txt的读取。实现labels与images的所需格式</p><ol><li><p>data_process.py：</p><blockquote><ul><li>根据images中不同文件夹和图片名称，生成对应的train、val、test.txt三个文件。内容为图片路径</li><li>清洗两个JSON文件中的必要性数据，并进行归一化处理（输出格式为：目标框类别 目标框中心点x轴相对于图片x轴的比例 目标框…y轴的比例 目标框宽度相对于图片宽度的比例 目标框长度…的比例）</li><li>生成（图片id.txt）到labels文件夹中</li></ul></blockquote></li><li><p>SeaDronesSee.yaml：让yolo命令读取到必要信息</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片名称信息路径</span></span><br><span class="line">train: ../../data/train.txt</span><br><span class="line">val: ../../data/val.txt</span><br><span class="line">test: ../../data/test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别数量</span></span><br><span class="line">nc: <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别名称</span></span><br><span class="line">names: [<span class="string">&#x27;ignored&#x27;</span>, <span class="string">&#x27;swimmer&#x27;</span>, <span class="string">&#x27;boat&#x27;</span>, <span class="string">&#x27;jetski&#x27;</span>, <span class="string">&#x27;life_saving_appliances&#x27;</span>, <span class="string">&#x27;buoy&#x27;</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>注意：’ignored’标签在标注图片中没有出现</li></ol><h2 id="四、致谢"><a href="#四、致谢" class="headerlink" title="四、致谢"></a>四、致谢</h2><p>感谢 <a href="https://blog.csdn.net/weixin_45921929/article/details/128673338?ops_request_misc=%7B%22request_id%22:%22170037567616800192218540%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170037567616800192218540&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-128673338-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=yolov8&spm=1018.2226.3001.4187">YOLOv8教程系列</a> 的方法指导</p><p>感谢超级好用的GPT3.5的超级好用的回答</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World2</title>
      <link href="/2024/12/26/test01/"/>
      <url>/2024/12/26/test01/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/12/26/hello-world/"/>
      <url>/2024/12/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
